/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a flexible access control model, primarily based on the owner-only access pattern, while allowing public read access where appropriate.
 *
 * Data Structure:
 * - Top-level collections: clients, projects, locations, tasks, personnel, equipment and samples
 * - Subcollections: results, exceedances, negativeExposureAssessments, and attachments, attached under their parents as detailed in the firestore.structure.
 *
 * Key Security Decisions:
 * - Clients, Projects, Locations, Tasks, Personnel and Equipment are not secured at this time, and require custom logic to be implemented.
 * - List operations on samples collection is public, which means anyone can see any sample.
 * - Schema validation is relaxed for rapid prototyping. Only critical relational integrity checks are enforced.
 *
 * Denormalization for Authorization:
 *   This ruleset avoids `get()` calls by relying on the assumption that authorization is delegated to helper functions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to client documents.
     * @path /clients/{clientId}
     * @allow (create, update, delete) if the user is the owner of the client.
     * @deny (create, update, delete) if the user is not the owner of the client.
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to project documents.
     * @path /projects/{projectId}
     * @allow (create, update, delete) if the user is the owner of the project.
     * @deny (create, update, delete) if the user is not the owner of the project.
     * @principle Enforces document ownership for writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to location documents.
     * @path /locations/{locationId}
     * @allow (create, update, delete) if the user is the owner of the location.
     * @deny (create, update, delete) if the user is not the owner of the location.
     * @principle Enforces document ownership for writes.
     */
    match /locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to task documents.
     * @path /tasks/{taskId}
     * @allow (create, update, delete) if the user is the owner of the task.
     * @deny (create, update, delete) if the user is not the owner of the task.
     * @principle Enforces document ownership for writes.
     */
    match /tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to personnel documents.
     * @path /personnel/{personnelId}
     * @allow (create, update, delete) if the user is the owner of the personnel.
     * @deny (create, update, delete) if the user is not the owner of the personnel.
     * @principle Enforces document ownership for writes.
     */
    match /personnel/{personnelId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to equipment documents.
     * @path /equipment/{equipmentId}
     * @allow (create, update, delete) if the user is the owner of the equipment.
     * @deny (create, update, delete) if the user is not the owner of the equipment.
     * @principle Enforces document ownership for writes.
     */
    match /equipment/{equipmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access and owner-only writes to sample documents.
     * @path /samples/{sampleId}
     * @allow (get, list) any user can read samples.
     * @allow (create) only if the request includes a matching ownerId.
     * @allow (update, delete) only if the user is the owner of the sample.
     * @deny (create, update, delete) if the user is not the owner of the sample.
     * @principle Public read with owner-only writes.
     */
    match /samples/{sampleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to result documents under a specific sample.
     * @path /samples/{sampleId}/results/{resultId}
     * @allow (create, update, delete) if the user is the owner of the parent sample.
     * @deny (create, update, delete) if the user is not the owner of the parent sample.
     * @principle Enforces document ownership for writes.
     */
    match /samples/{sampleId}/results/{resultId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to exposureLimit documents.
     * @path /exposureLimits/{exposureLimitId}
     * @allow (create, update, delete) if the user is the owner of the exposureLimit.
     * @deny (create, update, delete) if the user is not the owner of the exposureLimit.
     * @principle Enforces document ownership for writes.
     */
    match /exposureLimits/{exposureLimitId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to exceedance documents under a specific result.
     * @path /results/{resultId}/exceedance
     * @allow (create, update, delete) if the user is the owner of the parent result's sample.
     * @deny (create, update, delete) if the user is not the owner of the parent result's sample.
     * @principle Enforces document ownership for writes.
     */
    match /results/{resultId}/exceedance {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to negativeExposureAssessment documents under a specific project.
     * @path /projects/{projectId}/negativeExposureAssessments/{neaId}
     * @allow (create, update, delete) if the user is the owner of the parent project.
     * @deny (create, update, delete) if the user is not the owner of the parent project.
     * @principle Enforces document ownership for writes.
     */
    match /projects/{projectId}/negativeExposureAssessments/{neaId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Grants owner-only access to attachment documents under a specific sample.
     * @path /samples/{sampleId}/attachments/{attachmentId}
     * @allow (create, update, delete) if the user is the owner of the parent sample.
     * @deny (create, update, delete) if the user is not the owner of the parent sample.
     * @principle Enforces document ownership for writes.
     */
    match /samples/{sampleId}/attachments/{attachmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}