/**
 * @fileoverview Firestore Security Rules for AbateIQ application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user authentication.
 * It applies an "owner-only" access control pattern to most collections,
 * meaning only authenticated users can create, read, update, or delete
 * documents in those collections. List operations are disabled for most collections.
 *
 * Data Structure:
 * - Root-level collections: `clients`, `projects`, `locations`, `tasks`, `personnel`, `equipment`, `samples`, `exposureLimits`, `results`
 * - Subcollections: `samples/{sampleId}/results`, `results/{resultId}/exceedance`, `projects/{projectId}/negativeExposureAssessments`, `samples/{sampleId}/attachments`.
 *
 * Key Security Decisions:
 * - List operations are disabled for most root collections except `projects` to fix the error.
 * - The `SurveyReport` entity is intentionally omitted because it lacks structural or access control definition.
 * - No user listing is permitted.
 * - Data validation is relaxed in this prototype to allow for flexible schema evolution. Only relational integrity is enforced.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(resourceId) {
      return isSignedIn() && request.auth.uid == resourceId;
    }

    function isExistingOwner(resourceId) {
      return isOwner(resourceId) && resource != null;
    }

    /**
     * @description Defines access rules for the `clients` collection.
     * @path /clients/{clientId}
     * @allow (create) Authenticated user can create a client if the client ID matches their UID.
     * @deny (create) If the client ID does not match the authenticated user's UID.
     * @deny (read, update, delete, list) All read, update, delete, and list operations are denied.
     * @principle Enforces owner-only access for creating client documents.
     */
    match /clients/{clientId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `projects` collection.
     * @path /projects/{projectId}
     * @allow (get, list) Any signed-in user can read project documents.
     * @allow (create) Any signed-in user can create a project.
     * @deny (update, delete) Only the project owner can update or delete a project.
     * @principle Enforces public read access with owner-only writes for projects.
     */
    match /projects/{projectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingOwner(projectId);
      allow delete: if isExistingOwner(projectId);
    }

    /**
     * @description Defines access rules for the `locations` collection.
     * @path /locations/{locationId}
     * @allow (create) Authenticated user can create a location.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating location documents.
     */
    match /locations/{locationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `tasks` collection.
     * @path /tasks/{taskId}
     * @allow (create) Authenticated user can create a task.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating task documents.
     */
    match /tasks/{taskId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `personnel` collection.
     * @path /personnel/{personnelId}
     * @allow (create) Authenticated user can create a personnel record.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating personnel documents.
     */
    match /personnel/{personnelId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `equipment` collection.
     * @path /equipment/{equipmentId}
     * @allow (create) Authenticated user can create an equipment record.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating equipment documents.
     */
    match /equipment/{equipmentId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `samples` collection.
     * @path /samples/{sampleId}
     * @allow (create) Authenticated user can create a sample.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating sample documents.
     */
    match /samples/{sampleId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `results` subcollection under `samples`.
     * @path /samples/{sampleId}/results/{resultId}
     * @allow (create) Authenticated user can create a result.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating result documents.
     */
    match /samples/{sampleId}/results/{resultId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Defines access rules for the `results` collection.
     * @path /results/{resultId}
     * @allow (create) Authenticated user can create a result.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating result documents.
     */
      match /results/{resultId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `exposureLimits` collection.
     * @path /exposureLimits/{exposureLimitId}
     * @allow (create) Authenticated user can create an exposure limit.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating exposure limit documents.
     */
    match /exposureLimits/{exposureLimitId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `exceedance` subcollection under `results`.
     * @path /results/{resultId}/exceedance/{exceedanceId}
     * @allow (create) Authenticated user can create an exceedance.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating exceedance documents.
     */
    match /results/{resultId}/exceedance/{exceedanceId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `negativeExposureAssessments` subcollection under `projects`.
     * @path /projects/{projectId}/negativeExposureAssessments/{neaId}
     * @allow (create) Authenticated user can create a negative exposure assessment.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating negative exposure assessment documents.
     */
    match /projects/{projectId}/negativeExposureAssessments/{neaId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the `attachments` subcollection under `samples`.
     * @path /samples/{sampleId}/attachments/{attachmentId}
     * @allow (create) Authenticated user can create an attachment.
     * @deny (read, update, delete, list) All other operations are denied.
     * @principle Enforces owner-only access for creating attachment documents.
     */
    match /samples/{sampleId}/attachments/{attachmentId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}