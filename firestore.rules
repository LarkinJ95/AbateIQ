/**
 * @file Overview
 * This ruleset enforces a role-based access control model with strict ownership for certain collections and public read access for others.
 * Data is organized into root-level collections for major entities (Clients, Projects, etc.) and subcollections for related data.
 *
 * @data_structure
 * - /clients/{clientId}
 * - /projects/{projectId}
 * - /locations/{locationId}
 * - /tasks/{taskId}
 * - /personnel/{personnelId}
 * - /equipment/{equipmentId}
 * - /samples/{sampleId}
 * - /samples/{sampleId}/results/{resultId}
 * - /exposureLimits/{exposureLimitId}
 * - /results/{resultId}/exceedance
 * - /projects/{projectId}/negativeExposureAssessments/{neaId}
 * - /samples/{sampleId}/attachments/{attachmentId}
 *
 * @key_security_decisions
 * - Listing of collections is generally disallowed unless specifically required.
 * - Public read access is granted to some top-level collections but write access is restricted to authenticated users.
 * - Denormalization: No denormalization is required for the current schema, as there are no clearly defined user roles or ownership.
 * - Anonymous Auth: The ruleset allows anonymous authentication, meaning unauthenticated users may have access to the resources granted by these rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Allows read and write access to the 'clients' collection for authenticated users.
     * @path: /clients/{clientId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to client data.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'projects' collection for authenticated users.
     * @path: /projects/{projectId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to project data.
     */
    match /projects/{projectId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'locations' collection for authenticated users.
     * @path: /locations/{locationId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to location data.
     */
    match /locations/{locationId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'tasks' collection for authenticated users.
     * @path: /tasks/{taskId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to task data.
     */
    match /tasks/{taskId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'personnel' collection for authenticated users.
     * @path: /personnel/{personnelId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to personnel data.
     */
    match /personnel/{personnelId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'equipment' collection for authenticated users.
     * @path: /equipment/{equipmentId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to equipment data.
     */
    match /equipment/{equipmentId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'samples' collection for authenticated users.
     * @path: /samples/{sampleId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to sample data.
     */
    match /samples/{sampleId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();

       /**
        * @description: Allows read and write access to the 'results' subcollection for authenticated users.
        * @path: /samples/{sampleId}/results/{resultId}
        * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
        * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
        * @principle: Authenticated access to result data.
        */
      match /results/{resultId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }

      /**
       * @description: Allows read and write access to the 'attachments' subcollection for authenticated users.
       * @path: /samples/{sampleId}/attachments/{attachmentId}
       * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
       * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
       * @principle: Authenticated access to attachment data.
       */
      match /attachments/{attachmentId} {
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
      }
    }

    /**
     * @description: Allows read and write access to the 'exposureLimits' collection for authenticated users.
     * @path: /exposureLimits/{exposureLimitId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to exposure limit data.
     */
    match /exposureLimits/{exposureLimitId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'exceedance' subcollection for authenticated users.
     * @path: /results/{resultId}/exceedance
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to exceedance data.
     */
    match /results/{resultId}/exceedance {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description: Allows read and write access to the 'negativeExposureAssessments' subcollection for authenticated users.
     * @path: /projects/{projectId}/negativeExposureAssessments/{neaId}
     * @allow: Authenticated user (create), Authenticated user (read), Authenticated user (write)
     * @deny: Unauthenticated user (create), Unauthenticated user (read), Unauthenticated user (write), User not authenticated
     * @principle: Authenticated access to negative exposure assessment data.
     */
    match /projects/{projectId}/negativeExposureAssessments/{neaId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

        /**
         * @description Denies all access to the survey collection
         * @path /surveys
         * @allow (create) N/A
         * @deny (list) Any authenticated user
         * @principle Explicitly deny the user listing of the /surveys collection
         */
    match /surveys/{surveyId} {
        allow get: if false;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}