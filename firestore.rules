/**
 * @fileoverview Firestore Security Rules for AbateIQ.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure access control based on a combination of
 * ownership and role-based access patterns. Data is organized to allow for
 * efficient querying and prevent unauthorized data access.
 *
 * Data Structure:
 * - Root collections: /clients/{clientId}, /projects/{projectId}, /locations/{locationId},
 *   /tasks/{taskId}, /personnel/{personnelId}, /equipment/{equipmentId}, /exposureLimits/{exposureLimitId}
 * - Subcollections:
 *   - /samples/{sampleId}/results/{resultId}
 *   - /results/{resultId}/exceedance
 *   - /projects/{projectId}/negativeExposureAssessments/{neaId}
 *   - /samples/{sampleId}/attachments/{attachmentId}
 *
 * Key Security Decisions:
 * - No public listing is allowed for any collection containing private data.
 * - Data consistency between the path and document's internal fields enforced on create and update.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to client data.
     * @path /clients/{clientId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read client data
     * @principle Enforces document ownership for writes.
     */
    match /clients/{clientId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to project data.
     * @path /projects/{projectId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read project data.
     * @principle Enforces document ownership for writes.
     */
    match /projects/{projectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to location data.
     * @path /locations/{locationId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read location data.
     * @principle Enforces document ownership for writes.
     */
    match /locations/{locationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to task data.
     * @path /tasks/{taskId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read task data.
     * @principle Enforces document ownership for writes.
     */
    match /tasks/{taskId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to personnel data.
     * @path /personnel/{personnelId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read personnel data.
     * @principle Enforces document ownership for writes.
     */
    match /personnel/{personnelId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to equipment data.
     * @path /equipment/{equipmentId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read equipment data.
     * @principle Enforces document ownership for writes.
     */
    match /equipment/{equipmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to sample data.
     * @path /samples/{sampleId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.projectId exists
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.projectId does not exist
     * @allow (get, list) Any authenticated user can read sample data.
     * @principle Requires user to be signed in to write.
     */
    match /samples/{sampleId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to result data within a specific sample.
     * @path /samples/{sampleId}/results/{resultId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id"
     * @allow (get, list) Any authenticated user can read result data.
     * @principle Requires user to be signed in to write.
     */
    match /samples/{sampleId}/results/{resultId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to exposure limit data.
     * @path /exposureLimits/{exposureLimitId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id", data.id = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id", data.id = "some_user_id" (mismatched user ID)
     * @allow (get, list) Any authenticated user can read exposure limit data.
     * @principle Enforces document ownership for writes.
     */
    match /exposureLimits/{exposureLimitId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.id == request.auth.uid;
    }

    /**
     * @description Manages access to exceedance data within a specific result.
     * @path /results/{resultId}/exceedance
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id"
     * @deny (create, update, delete)
     *   Request: auth.uid = "another_user_id"
     * @allow (get, list) Any authenticated user can read exceedance data.
     * @principle Requires user to be signed in to write.
     */
    match /results/{resultId}/exceedance {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to negative exposure assessment data within a specific project.
     * @path /projects/{projectId}/negativeExposureAssessments/{neaId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id"
     * @deny (create, update, delete)
     * @allow (get, list) Any authenticated user can read NEA data.
     * @principle Requires user to be signed in to write.
     */
    match /projects/{projectId}/negativeExposureAssessments/{neaId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages access to attachment data within a specific sample.
     * @path /samples/{sampleId}/attachments/{attachmentId}
     * @allow (create, update, delete)
     *   Request: auth.uid = "some_user_id"
     * @deny (create, update, delete)
     * @allow (get, list) Any authenticated user can read attachment data.
     * @principle Requires user to be signed in to write.
     */
    match /samples/{sampleId}/attachments/{attachmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to list exceedances
     * @path /exceedances
     * @allow (get, list) Any authenticated user can read exceedance data.
     */
     match /exceedances/{exceedanceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}